{"version":3,"sources":["webpack:///./src/number/autograd/autograd.js?00d0"],"names":["nd","require","Ops","Number","deepClone","data","JSON","parse","stringify","Autograd","module","exports","window","topoSort","NoGrad","chainDebug","outputGrad","inputGrads","debug","indent","i","level","console","warn","value","g","bw","vid","backward","filterAndFlatten","filter","d","reduce","ss","length","runVJP","nb","vjp","runBackWard","preGrads","map","bwGrad","grad","postGrads","ret","func","wrapper","inputs","nd$0","c","enummerate","isNumber","nd$out","_nds$grad","_nds$gradSum","_vid","add","nds$grad","Object","values"],"mappings":"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","file":"hot/hot-update.js","sourcesContent":["\"use strict\";\nconst nd = require('../ndarray');\nconst Ops  = require('../operators');\nconst Number = require('../number');\n\nconst deepClone = (data)=> data?JSON.parse(JSON.stringify(data)):null;\n\nconst Autograd = {};\n\nif (typeof module !== 'undefined') {\n  module.exports   = Autograd;\n} \nif (typeof window !== 'undefined') {\n  window.Autograd = Autograd;\n}\n\nconst topoSort = ()=>{\n\n}\n\nconst NoGrad = true;\n\nconst chainDebug = (outputGrad, inputGrads, debug)=>{\n  if(debug){\n      let indent = '\\t';\n      for(let i = 0; i< debug; i++){\n        indent += '\\t';\n      }\n      debug.level += 1;\n      console.warn( indent, '[level]', debug.level );  \n      console.warn( indent, '[output]', outputGrad.value );\n      if(inputGrads){\n        for(let g of inputGrads){\n          if(g.bw){\n            console.warn( indent,'[inputs]', g.vid, g.bw.value );   \n          } \n        }\n      }\n      else{\n        console.warn(indent, '[end of chain]');\n      }\n  }\n}\nconst backward = (outputGrad, inputGrads, debug)=>{\n  chainDebug(outputGrad, inputGrads, debug);\n  const filterAndFlatten = (g)=>{\n    return g.filter( d=>d )\n      .reduce( (ss,d)=>{ return [...ss,...(d.length?d:[d])]; }, [] );\n  }\n  const runVJP = (outputGrad, nb, vjp)=>{\n    // console.warn(vjp);\n    return vjp?vjp(outputGrad, nb):outputGrad;\n  }\n  const runBackWard = (outputGrad, inputGrads)=>{\n    if(inputGrads){\n      let preGrads = inputGrads.map( g => {\n                let bw = g.bw, vjp = g.vjp, vid = g.vid;\n                let bwGrad = runVJP(outputGrad, bw, vjp);\n                bwGrad.vid = vid;\n                if(bw){///recursive  \n                  return backward( bwGrad, bw.grad, deepClone(debug) ); \n                }\n                else{ return bwGrad; }\n              } );\n      let postGrads = filterAndFlatten(preGrads);\n      return postGrads;\n    } \n    else{\n      return outputGrad;\n    }\n  }\n  let ret = runBackWard(outputGrad, inputGrads);\n  // console.warn( ret );\n  return ret;\n}\n\nAutograd.grad = function(func){\n  const wrapper = (...inputs)=>{\n    for( let [nd$0, c] of nd.enummerate(inputs) ) {\n      if(Number().isNumber(nd$0) && nd$0.grad !== false){\n        nd$0.grad = [{ vid: c, bw: null, vjp:null}];\n      }\n    }\n    let nd$out   = func(...inputs);\n    nd$out.value = nd$out.value.map(d=>1);//reset value to 1\n    let debug = { level:0 };\n    let _nds$grad = backward( nd$out, nd$out.grad, debug);\n    let _nds$gradSum  = _nds$grad.reduce((ss,g)=>{\n        const _vid = g.vid;\n        ss[_vid] = ss[_vid]?Ops.add(ss[_vid], g, NoGrad):g;  \n        return ss;\n      },{})\n    console.warn( _nds$gradSum );\n    let nds$grad = Object.values( _nds$gradSum );\n    console.warn( nds$grad );\n    return nds$grad;\n  }\n  return wrapper;\n}\n\nAutograd.backward = backward;\n\n\n// WEBPACK FOOTER //\n// ./src/number/autograd/autograd.js"],"sourceRoot":""}