{"version":3,"sources":["webpack:///./src/number/autograd/autograd.js?00d0"],"names":["nd","require","Ops","Number","GradOps","deepClone","data","JSON","parse","stringify","Autograd","module","exports","window","chainDebug","outputGrad","inputGrads","debug","indent","i","level","console","warn","value","g","bw","vid","backward","filterAndFlatten","filter","d","reduce","ss","length","runVJP","nb","vjp","runTransformBW","transform","runBackWard","bwNb","transformRet","preGrads","map","idx","bwGrad","grad","postGrads","ret","Operators","opName","_OpFunc","appendGradOp","inputs","stopGrad","last","slice","undefined","Error","func","wrapper","nd$0","c","enummerate","isNumber","nd$out","_nds$grad","_nds$gradSum","_vid","add","nds$grad","Object","values"],"mappings":"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","file":"hot/hot-update.js","sourcesContent":["\"use strict\";\nconst nd = require('../ndarray');\nconst Ops  = require('../operators');\nconst Number = require('../number');\nconst GradOps = require('./gradOps');\n\n\nconst deepClone = (data)=> data?JSON.parse(JSON.stringify(data)):null;\n\nconst Autograd = {};\n\nif (typeof module !== 'undefined') {\n  module.exports   = Autograd;\n} \nif (typeof window !== 'undefined') {\n  window.Autograd = Autograd;\n}\n\nconst chainDebug = (outputGrad, inputGrads, debug)=>{\n  if(debug){\n    let indent = '\\t';\n    for(let i = 0; i< debug; i++){\n      indent += '\\t';\n    }\n    debug.level += 1;\n    console.warn( indent, '[level]', debug.level );  \n    console.warn( indent, '[output]', outputGrad.value );\n    if(inputGrads){\n      for(let g of inputGrads){\n        if(g.bw){\n          console.warn( indent,'[inputs]', g.vid, g.bw.value );   \n        } \n      }\n    }\n    else{\n      console.warn(indent, '[end of chain]');\n    }\n  }\n}\nconst backward = (outputGrad, inputGrads, debug)=>{\n  chainDebug(outputGrad, inputGrads, debug);\n  const filterAndFlatten = (g)=>{\n    return g.filter( d=>d )\n      .reduce( (ss,d)=>{ return [...ss,...(d.length?d:[d])]; }, [] );\n  }\n  const runVJP = (outputGrad, nb, vjp)=>{\n    // console.warn(vjp);\n    return vjp?vjp(outputGrad, nb):outputGrad;\n  }\n  const runTransformBW = (outputGrad, inputGrads, transform)=>{\n    // console.warn('transform', outputGrad.transformRet)\n    return transform?transform(outputGrad, inputGrads): outputGrad;\n  }\n  const runBackWard = (outputGrad, inputGrads)=>{\n    if(inputGrads){\n      let bwNb = runTransformBW(outputGrad, inputGrads, outputGrad.transformRet); \n      let preGrads = inputGrads.map( (g, idx) => {\n                let bw = g.bw, vjp = g.vjp, vid = g.vid;\n                let bwGrad = runVJP(bwNb, bw, vjp);\n                bwGrad.vid = vid;\n                if(bw){///recursive  \n                  return backward( bwGrad, bw.grad, deepClone(debug) ); \n                }\n                else{ return bwGrad; }\n              } );\n      let postGrads = filterAndFlatten(preGrads);\n      return postGrads;\n    } \n    else{\n      return outputGrad;\n    }\n  }\n  let ret = runBackWard(outputGrad, inputGrads);\n  // console.warn( ret );\n  return ret;\n}\n\nAutograd.Operators = {};\nfor(let opName in Ops){\n  const _OpFunc = Ops[opName];\n  const appendGradOp = (...inputs)=>{\n    let stopGrad = false;\n    const [ last ] = inputs.slice(-1);\n    if(typeof last === 'boolean'){\n      stopGrad = last;//either true or false\n      inputs = inputs.slice(0,-1);\n    }\n    let ret = _OpFunc(...inputs);\n    if(stopGrad === true){\n      return ret;\n    }\n    else{\n      if(GradOps[opName] === undefined){\n        throw Error(`gradOp[${opName}] Not implement`);\n      }\n      ret = GradOps[opName](ret, ...inputs);\n      return ret;\n    }\n  }\n  Autograd.Operators[opName] = appendGradOp\n}\n\nAutograd.grad = function(func){\n  const wrapper = (...inputs)=>{\n    for( let [nd$0, c] of nd.enummerate(inputs) ) {\n      if(Number().isNumber(nd$0) && nd$0.grad !== false){\n        nd$0.grad = [{ vid: c, bw: null, vjp:null}];\n      }\n    }\n    let nd$out   = func(...inputs);\n    nd$out.value = nd$out.value.map(d=>1);//reset value to 1\n    let debug = { level:0 };\n    let _nds$grad = backward( nd$out, nd$out.grad, debug);\n    let _nds$gradSum  = _nds$grad.reduce((ss,g)=>{\n        const _vid = g.vid;\n        ss[_vid] = ss[_vid]?Ops.add(ss[_vid], g):g;  \n        return ss;\n      },{})\n    // console.warn( _nds$gradSum );\n    let nds$grad = Object.values( _nds$gradSum );\n    // console.warn( nds$grad );\n    return nds$grad;\n  }\n  return wrapper;\n}\n\nAutograd.backward = backward;\n\n\n// WEBPACK FOOTER //\n// ./src/number/autograd/autograd.js"],"sourceRoot":""}